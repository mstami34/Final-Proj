import random
import json

# Auto detect text files and perform LF normalization
* text=auto

class Game:
    def __init__(self, character_file):
        with open(character_file, 'r') as file:
            self.characters = json.load(file)["characters"]
        self.player = None
        self.cpu = None
        self.cooldowns = {}

    def choose_character(self):
        print("Available characters:")
        for idx, char in enumerate(self.characters):
            print(f"{idx + 1}. {char['name']} (Health: {char['health']}, Defense: {char['defense']})")
        while True:
            try:
                choice = int(input("Choose your character (1/2/3): ")) - 1
                if 0 <= choice < len(self.characters):
                    break
                else:
                    print("Invalid choice. Please select a valid number.")
            except ValueError:
                print("Invalid input. Please enter a number.")
        self.player = self.characters[choice]
        self.cpu = random.choice([char for idx, char in enumerate(self.characters) if idx != choice])
        print(f"You chose {self.player['name']}. CPU chose {self.cpu['name']}.")

    def reset_cooldowns(self):
        for char in [self.player, self.cpu]:
            self.cooldowns[char["name"]] = {list(move.keys())[0]: 0 for move in char["player_moves"]}

    def show_moves(self, char):
        print(f"\n{char['name']}'s moves:")
        for idx, move in enumerate(char["player_moves"]):
            move_name = list(move.keys())[0]
            cooldown = self.cooldowns[char["name"]][move_name]
            print(f"{idx + 1}. {move_name} (Cooldown: {cooldown})")

    def apply_move(self, attacker, defender, move_key):
        move = attacker["player_moves"][move_key]
        move_name = list(move.keys())[0]

        if self.cooldowns[attacker["name"]][move_name] > 0:
            print(f"{move_name} is on cooldown!")
            return False

        damage = move["damage"] - defender["defense"]
        damage = max(damage, 0)
        defender["health"] -= damage
        print(f"{attacker['name']} used {move_name}! It dealt {damage} damage.")
        self.cooldowns[attacker["name"]][move_name] = move["cooldown"]

        if "effect" in move:
            print(f"Effect applied: {move['effect']}")

        return True

    def take_turn(self, attacker, defender):
        if attacker == self.player:
            self.show_moves(attacker)
            while True:
                try:
                    move_idx = int(input(f"Choose a move for {attacker['name']} (1-{len(attacker['player_moves'])}): ")) - 1
                    if 0 <= move_idx < len(attacker["player_moves"]):
                        break
                    else:
                        print("Invalid move. Try again.")
                except ValueError:
                    print("Invalid input. Please enter a number.")
        else:
            move_idx = random.choice(range(len(attacker["player_moves"])))

        self.apply_move(attacker, defender, move_idx)

    def reduce_cooldowns(self):
        for char in [self.player, self.cpu]:
            for move in self.cooldowns[char["name"]]:
                if self.cooldowns[char["name"]][move] > 0:
                    self.cooldowns[char["name"]][move] -= 1

    def play(self):
        self.choose_character()
        self.reset_cooldowns()

        turn = 0
        while self.player["health"] > 0 and self.cpu["health"] > 0:
            print(f"\n{self.player['name']} Health: {self.player['health']}")
            print(f"{self.cpu['name']} Health: {self.cpu['health']}\n")
            if turn == 0:
                print("Your turn!")
                self.take_turn(self.player, self.cpu)
            else:
                print("CPU's turn!")
                self.take_turn(self.cpu, self.player)

            self.reduce_cooldowns()
            turn = 1 - turn

        if self.player["health"] <= 0:
            print("You lost! CPU wins.")
        else:
            print("You won! CPU is defeated.")

game = Game("Characters.json")
game.play()



class Player:
    def __init__(self, name, health, defense):
        self.health = health
        self.name = name
        self.wins = 0
        self.defense = defense



    def attacking_damage(self, damage_amount, attacking):
        if (damage_amount > self.health):
            death = abs(self.health - damage_amount)
            self.health = 0
            if (death > 0):
                print("{0} has been defeated by {1}!"
                      .format(self.name.capitalize(), attacking))
        else:
            self.health -= damage_amount
            print("{0} takes {1} damage from {2}!"
                  .format(self.name.capitalize(), damage_amount, attacking))
    


import random

class ComputerPlayer:
    """A computer-controlled player in the fighting game."""
    
    def __init__(self, name, health, defense, moves):
        """
        Initializes the computer player with attributes and moves.

        Args:
            name (str): The name of the computer character.
            health (int): The health of the computer character.
            defense (int): The base defense value of the computer character.
            moves (list of dict): A list of moves the character can use.
        """
        self.name = name
        self.health = health
        self.defense = defense
        self.moves = moves
        self.cooldowns = {move["name"]: 0 for move in moves}

    def choose_move(self):
        """Chooses an offensive move to use."""
        available_moves = [move for move in self.moves if self.cooldowns[move["name"]] == 0]
        if not available_moves:
            return None  # No moves available, skip turn
        return random.choice(available_moves)

    def defense_action(self, incoming_move):
        """Chooses a defensive response to an incoming attack.

        Args:
            incoming_move (dict): The player's attacking move.

        Returns:
            str: The defensive action.
        """
        defensive_options = ["block", "dodge"]
        if incoming_move["damage"] > 50:
            defensive_options.append("counter")
        return random.choice(defensive_options)

    def attack(self, damage):
        """Applies damage to the computer's health, considering defense."""
        effective_damage = max(0, damage - self.defense)
        self.health -= effective_damage
        return effective_damage

    def update_cooldowns(self):
        """Updates the cooldowns of the character's moves."""
        for move in self.cooldowns:
            if self.cooldowns[move] > 0:
                self.cooldowns[move] -= 1

    def take_turn(self, player_move=None):
        """
        Takes the computer's turn, including defense and attack decisions.

        Args:
            player_move (dict): The player's attacking move, if any.

        Returns:
            dict: The chosen move or defensive action.
        """
        # If defending against a player's move
        if player_move:
            defense = self.defense_action(player_move)
            print(f"{self.name} uses {defense} to counter {player_move['name']}!")
            return {"action": "defense", "defense": defense}

        # Choose an offensive move
        attack_move = self.choose_move()
        if attack_move:
            self.cooldowns[attack_move["name"]] = attack_move["cooldown"]
            print(f"{self.name} uses {attack_move['name']}!")
            return {"action": "attack", "move": attack_move}

        print(f"{self.name} has no moves available and skips the turn.")
        return {"action": "skip"}
