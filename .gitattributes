# Auto detect text files and perform LF normalization
* text=auto


class Player:
    def __init__(self, name, health, defense):
        self.health = health
        self.name = name
        self.wins = 0
        self.defense = defense

    def __repr__(self):
        return f"Character(name={self.name}, health={self.health}, defense={self.defense})"

def load_characters_from_file(Characters):
    characters = []
    
    with open(Characters, 'r') as file:
        lines = file.readlines()
        
        
        name = health = defense = None
        
        for line in lines:
            line = line.strip()
            if line.startswith("Name:"):
                if name:  # Save previous character if available
                    characters.append(Character(name, health, defense))
                name = line.split(":")[1].strip()
            elif line.startswith("health:"):
                age = int(line.split(":")[1].strip())
            elif line.startswith("defense:"):
                char_class = line.split(":")[1].strip()
        
        
        if name:
            characters.append(Character(name, health, defense))
    
    return characters


characters = load_characters_from_file("characters.json")


for character in characters:
    print(character)

    def attacking_damage(self, damage_amount, attacking):
        if (damage_amount > self.health):
            death = abs(self.health - damage_amount)
            self.health = 0
            if (death > 0):
                print("{0} has been defeated by {1}!"
                      .format(self.name.capitalize(), attacking))
        else:
            self.health -= damage_amount
            print("{0} takes {1} damage from {2}!"
                  .format(self.name.capitalize(), damage_amount, attacking))
    


class Computer:
    def __init__(self, health):
        self.health = health
        self.defensive_options = ["block", "counter", "dodge"]
    
    def defense(self, player_move):
        """Chooses a defense based on player's move"""
        if player_move == "punch":
            return random.choice(["dodge", "counter"])
        elif player_move == "leg sweep":
            return random.choice(["block", "counter"])
        elif player_move == "special move 1":
            return random.choice(["block", "counter"])
        elif player_move == "special move 2":
            return random.choice(["block", "counter"])
        else:
            return random.choice(self.defensive_options)
