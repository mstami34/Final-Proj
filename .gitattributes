# Auto detect text files and perform LF normalization
* text=auto

class Game:
    def __init__(self, character_file):
        with open(character_file, 'r') as file:
            self.characters = json.load(file)["characters"]
        self.player = None
        self.cpu = None
        self.cooldowns = {}

    def choose_character(self):
        print("Available characters:")
        for idx, char in enumerate(self.characters):
            print(f"{idx + 1}. {char['name']} (Health: {char['health']}, Defense: {char['defense']})")
        choice = int(input("Choose your character (1/2/3): ")) - 1
        self.player = self.characters[choice]
        self.cpu = random.choice([char for idx, char in enumerate(self.characters) if idx != choice])
        print(f"You chose {self.player['name']}. CPU chose {self.cpu['name']}.")

    def reset_cooldowns(self):
        """Initialize or reset cooldowns for all moves."""
        for char in [self.player, self.cpu]:
            self.cooldowns[char["name"]] = {move: 0 for move in char["player_moves"]}

    def show_moves(self, char):
        """Display available moves."""
        print(f"\n{char['name']}'s moves:")
        for idx, move in enumerate(char["player_moves"]):
            move_name = list(move.keys())[0]
            cooldown = self.cooldowns[char["name"]][move]
            print(f"{idx + 1}. {move_name} (Cooldown: {cooldown})")

    def apply_move(self, attacker, defender, move_key):
        """Apply the selected move."""
        move = attacker["player_moves"][move_key]
        move_name = list(move.keys())[0]

        if self.cooldowns[attacker["name"]][move] > 0:
            print(f"{move_name} is on cooldown!")
            return False

        damage = move["damage"] - defender["defense"]
        damage = max(damage, 0)  # Ensure damage is not negative
        defender["health"] -= damage
        print(f"{attacker['name']} used {move_name}! It dealt {damage} damage.")
        self.cooldowns[attacker["name"]][move] = move["cooldown"]

        # Apply effects if the move has any
        if "effect" in move:
            print(f"Effect applied: {move['effect']}")

        return True

    def take_turn(self, attacker, defender):
        """Handle a single turn."""
        if attacker == self.player:
            self.show_moves(attacker)
            move_idx = int(input(f"Choose a move for {attacker['name']} (1-{len(attacker['player_moves'])}): ")) - 1
        else:
            move_idx = random.choice(range(len(attacker["player_moves"])))

        self.apply_move(attacker, defender, move_idx)

    def reduce_cooldowns(self):
        """Reduce all cooldowns by 1 (if greater than 0)."""
        for char in [self.player, self.cpu]:
            for move in self.cooldowns[char["name"]]:
                if self.cooldowns[char["name"]][move] > 0:
                    self.cooldowns[char["name"]][move] -= 1

    def play(self):
        """Main game loop."""
        self.choose_character()
        self.reset_cooldowns()

        turn = 0  # 0 for player, 1 for CPU
        while self.player["health"] > 0 and self.cpu["health"] > 0:
            print(f"\n{self.player['name']} Health: {self.player['health']}")
            print(f"{self.cpu['name']} Health: {self.cpu['health']}\n")
            if turn == 0:
                print("Your turn!")
                self.take_turn(self.player, self.cpu)
            else:
                print("CPU's turn!")
                self.take_turn(self.cpu, self.player)

            self.reduce_cooldowns()
            turn = 1 - turn  # Switch turns

        if self.player["health"] <= 0:
            print("You lost! CPU wins.")
        else:
            print("You won! CPU is defeated.")


class Player:
    def __init__(self, name, health, defense):
        self.health = health
        self.name = name
        self.wins = 0
        self.defense = defense

    def __repr__(self):
        return f"Character(name={self.name}, health={self.health}, defense={self.defense})"

def load_characters_from_file(Characters):
    characters = []
    
    with open(Characters, 'r') as file:
        lines = file.readlines()
        
        
        name = health = defense = None
        
        for line in lines:
            line = line.strip()
            if line.startswith("Name:"):
                if name:  
                    characters.append(Character(name, health, defense))
                name = line.split(":")[1].strip()
            elif line.startswith("health:"):
                age = int(line.split(":")[1].strip())
            elif line.startswith("defense:"):
                char_class = line.split(":")[1].strip()
        
        
        if name:
            characters.append(Character(name, health, defense))
    
    return characters


characters = load_characters_from_file("characters.json")


for character in characters:
    print(character)

    def attacking_damage(self, damage_amount, attacking):
        if (damage_amount > self.health):
            death = abs(self.health - damage_amount)
            self.health = 0
            if (death > 0):
                print("{0} has been defeated by {1}!"
                      .format(self.name.capitalize(), attacking))
        else:
            self.health -= damage_amount
            print("{0} takes {1} damage from {2}!"
                  .format(self.name.capitalize(), damage_amount, attacking))
    


class Computer:
    def __init__(self, health):
        self.health = health
        self.defensive_options = ["block", "counter", "dodge"]
    
    def defense(self, player_move):
        """Chooses a defense based on player's move"""
        if player_move == "punch":
            return random.choice(["dodge", "counter"])
        elif player_move == "leg sweep":
            return random.choice(["block", "counter"])
        elif player_move == "special move 1":
            return random.choice(["block", "counter"])
        elif player_move == "special move 2":
            return random.choice(["block", "counter"])
        else:
            return random.choice(self.defensive_options)
